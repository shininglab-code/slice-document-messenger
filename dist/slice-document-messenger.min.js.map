{"version":3,"sources":["../../src/SliceMessage.js","../../src/SliceMessageTransport.js","../../src/SliceLocalStorageTransport.js","../../src/SliceMessageBox.js","../../src/SliceMessenger.js","../../src/SliceMessengerFactory.js"],"names":[],"mappings":"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","sourcesContent":["/**\r\n  * Slice Document Messenger\r\n  * Copyright 2020 shininglab (https://github.com/shininglab-code)\r\n  * Licensed under MIT\r\n  */\r\n\r\n/**\r\n * Message.\r\n */\r\nclass SliceMessage {\r\n    /**\r\n     * @constructor\r\n     * @param {string} name Message name\r\n     * @param {object} data Message data\r\n     */\r\n    constructor(name, data) {\r\n        this.name = name || null\r\n        this.data = data || {}\r\n    }\r\n    /**\r\n     * Create SliceMessage\r\n     * @param {string} name Message name\r\n     * @param {object} data Message data\r\n     * @return {SliceMessage} new SliceMessage\r\n     * @static\r\n     */\r\n    static create(name, data) {\r\n        return new SliceMessage(name, data)\r\n    }\r\n    /**\r\n     * Create SliceMessage from JSON string\r\n     * @param {string} str JSON string\r\n     * @return {SliceMessage} new SliceMessage\r\n     * @static\r\n     */\r\n    static fromJSON(str) {\r\n        let name = null\r\n        let data = {}\r\n        try {\r\n            const parsed = JSON.parse(str)\r\n            if (typeof parsed === 'object') {\r\n                if (parsed.hasOwnProperty('name')) {\r\n                    name = parsed.name\r\n                }\r\n                if (parsed.hasOwnProperty('data') && typeof parsed.data === 'object') {\r\n                    data = parsed.data\r\n                }\r\n            }\r\n        } catch (e) {\r\n            /* WHOOPS */\r\n            name = 'MessageParseError'\r\n            data = {\r\n                error: e,\r\n                raw: str\r\n            }\r\n        }\r\n        return new SliceMessage(name, data)\r\n    }\r\n    /**\r\n     * Transfrom to JSON string\r\n     * @return {string} JSON string\r\n     */\r\n    toString() {\r\n        return JSON.stringify({\r\n            name: this.name,\r\n            data: this.data\r\n        })\r\n    }\r\n}\r\n\r\n/* export start */\r\nexport default SliceMessage\r\n/* export end */\r\n","/**\r\n  * Slice Document Messenger\r\n  * Copyright 2020 shininglab (https://github.com/shininglab-code)\r\n  * Licensed under MIT\r\n  */\r\n\r\n/**\r\n * Message transport.\r\n */\r\nclass SliceMessageTransport {\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        this.receivers = {}\r\n    }\r\n    /**\r\n     * Get transport address\r\n     * @param {string} address Receiver address.\r\n     * @return {string} transport address\r\n     * @static\r\n     */\r\n    static getAddress(address) {\r\n        return `transport-${address}`\r\n    }\r\n    /**\r\n     * Check if transportation is available\r\n     * @return {boolean} transportation available\r\n     * @static\r\n     */\r\n    static isAvailable() {\r\n        return true\r\n    }\r\n    /**\r\n     * Check if transport is available\r\n     * @return {boolean} transport available\r\n     * @static\r\n     */\r\n    isAvailable() {\r\n        return this.constructor.isAvailable()\r\n    }\r\n    /**\r\n     * Add receiver\r\n     * @param {string} address Receiver address.\r\n     * @param {function} receiver Receiver function.\r\n     * @return {SliceMessageTransport} current SliceMessageTransport\r\n     * @public\r\n     */\r\n    addReceiver(address, receiver) {\r\n        const transportAddress = this.constructor.getAddress(address)\r\n        if (!this.receivers.hasOwnProperty(transportAddress)) {\r\n            this.receivers[transportAddress] = []\r\n        }\r\n        this.receivers[transportAddress].push(receiver)\r\n        return this\r\n    }\r\n    /**\r\n     * Remove receiver\r\n     * @param {string} address SliceMessage address.\r\n     * @param {function} receiver Receiver function.\r\n     * @return {SliceMessageTransport} current SliceMessageTransport\r\n     * @public\r\n     */\r\n    removeReceiver(address, receiver) {\r\n        const transportAddress = this.constructor.getAddress(address)\r\n        if (this.receivers.hasOwnProperty(transportAddress)) {\r\n            const index = this.receivers[transportAddress].indexOf(receiver)\r\n            if (index > -1) {\r\n                this.receivers[transportAddress].splice(index, 1)\r\n            }\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Has any reciever with such address\r\n     * @param {string} address Receivers address.\r\n     * @param {boolean} isTransport Is transport address.\r\n     * @return {boolean} true|false\r\n     * @public\r\n     */\r\n    hasAddress(address, isTransport) {\r\n        const transportAddress = isTransport ? address : this.constructor.getAddress(address)\r\n        return this.receivers.hasOwnProperty(transportAddress) && this.receivers[transportAddress].length\r\n    }\r\n    /**\r\n     * Recieve message\r\n     * @param {string} address Transport address.\r\n     * @param {SliceMessage} message SliceMessage instance.\r\n     * @param {boolean} isTransport Is transport address.\r\n     * @return {SliceMessenger} current SliceMessenger\r\n     * @public\r\n     */\r\n    receive(address, message, isTransport) {\r\n        const transportAddress = isTransport ? address : this.constructor.getAddress(address)\r\n        if (this.receivers.hasOwnProperty(transportAddress)) {\r\n            this.receivers[transportAddress].map((receiver) => {\r\n                receiver(message)\r\n            })\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Send message\r\n     * @param {string} address Messange address.\r\n     * @param {SliceMessage} message SliceMessage instance.\r\n     * @return {SliceMessageTransport} current SliceMessageTransport\r\n     * @public\r\n     */\r\n    send(address, message) {\r\n        if (window.console) {\r\n            console.log(`${this.constructor.getAddress(address)}: ${message.toString()}`)\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Remove\r\n     * @return {void}\r\n     * @public\r\n     */\r\n    remove() {\r\n        this.receivers = {}\r\n    }\r\n}\r\n\r\n/* export start */\r\nexport default SliceMessageTransport\r\n/* export end */\r\n","/**\r\n  * Slice Document Messenger\r\n  * Copyright 2020 shininglab (https://github.com/shininglab-code)\r\n  * Licensed under MIT\r\n  */\r\n\r\n/* import start */\r\nimport SliceMessage from './SliceMessage.js'\r\nimport SliceMessageTransport from './SliceMessageTransport.js'\r\n/* import end */\r\n\r\n/**\r\n * Message transport.\r\n */\r\nclass SliceLocalStorageTransport extends SliceMessageTransport {\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        super()\r\n        this.handle = this.handle.bind(this)\r\n        window.addEventListener('storage', this.handle)\r\n    }\r\n    /**\r\n     * Handle storage event\r\n     * @param {object} e Local storage event.\r\n     * @return {SliceLocalStorageTransport} current SliceLocalStorageTransport\r\n     * @private\r\n     */\r\n    handle(e) {\r\n        if (!this.hasAddress(e.key, true) || e.newValue === null) {\r\n            return null\r\n        }\r\n        const message = SliceMessage.fromJSON(e.newValue)\r\n        return this.receive(e.key, message, true)\r\n    }\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    send(address, message) {\r\n        const transportAddress = this.constructor.getAddress(address)\r\n        localStorage.setItem(transportAddress, message.toString())\r\n        localStorage.removeItem(transportAddress)\r\n        return this\r\n    }\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    remove() {\r\n        window.removeEventListener('storage', this.handle)\r\n        super.remove()\r\n    }\r\n}\r\n\r\n/* export start */\r\nexport default SliceLocalStorageTransport\r\n/* export end */\r\n","/**\r\n  * Slice Document Messenger\r\n  * Copyright 2020 shininglab (https://github.com/shininglab-code)\r\n  * Licensed under MIT\r\n  */\r\n\r\n/* import start */\r\nimport SliceMessenger from './SliceMessenger.js'\r\n/* import end */\r\n\r\n/**\r\n * Message box.\r\n * Used for quick messages handling.\r\n * Messages can be handled by itself or by its this.owner.\r\n */\r\nclass SliceMessageBox {\r\n    /**\r\n     * @constructor\r\n     * @param {object} owner Message box owner\r\n     * @param {object} settings Message box settings\r\n     * @param {SliceMessenger} messenger SliceMessenger instance\r\n     * @param {boolean} subscribe Subscribe to provided SliceMessenger\r\n     */\r\n    constructor(owner = {}, settings = {}, messenger, subscribe) {\r\n        this.settings = settings\r\n        this.owner = owner\r\n        if (messenger) {\r\n            this.setMessenger(messenger, subscribe)\r\n        }\r\n    }\r\n    /**\r\n     * Set messenger\r\n     * @param {SliceMessenger} messenger SliceMessenger instance.\r\n     * @param {boolean} subscribe Subscribe to provided SliceMessenger\r\n     * @param {boolean} unsubscribe Un-subscribe from previous SliceMessenger\r\n     * @return {SliceMessageBox} current SliceMessageBox\r\n     * @public\r\n     */\r\n    setMessenger(messenger, subscribe, unsubscribe) {\r\n        if (this.messenger && unsubscribe) {\r\n            this.messenger.removeBox(this)\r\n        }\r\n        if (messenger instanceof SliceMessenger) {\r\n            this.messenger = messenger\r\n            if (subscribe) {\r\n                this.messenger.addBox(this)\r\n            }\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Recieve message\r\n     * @param {SliceMessage} message SliceMessage instance.\r\n     * @return {SliceMessageBox} current SliceMessageBox\r\n     * @public\r\n     */\r\n    receive(message) {\r\n        if (message.name) {\r\n            const settings = this.settings\r\n            let handler = null\r\n            let handlerSettings = settings.handlers && settings.handlers.hasOwnProperty(message.name) ?\r\n                settings.handlers[message.name] : settings.defaultHandler || null\r\n            if (handlerSettings) {\r\n                if (typeof handlerSettings === 'string') {\r\n                    handlerSettings = {\r\n                        self: false,\r\n                        handler: handlerSettings\r\n                    }\r\n                }\r\n                if (handlerSettings.self) {\r\n                    if (this[handlerSettings.handler]) {\r\n                        handler = this[handlerSettings.handler]\r\n                        this[handlerSettings.handler](message)\r\n                    }\r\n                } else if (this.owner[handlerSettings.handler]) {\r\n                    handler = this.owner[handlerSettings.handler]\r\n                }\r\n            }\r\n\r\n            if (handler) {\r\n                handler(message)\r\n            } else if (handlerSettings) {\r\n                throw new Error(`Can't handle message ${message.name}.`)\r\n            }\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Send message\r\n     * @param {string} name SliceMessage name.\r\n     * @param {object} data SliceMessage data.\r\n     * @param {variable} timeout SliceMessage timeout.\r\n     * @return {SliceMessageBox} current SliceMessageBox\r\n     * @public\r\n     */\r\n    send(name, data, timeout) {\r\n        if (this.messenger) {\r\n            this.messenger.send(name, data, timeout)\r\n        } else {\r\n            throw new Error(\"Can't send message: no messenger provided.\")\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Send message to the current messenger only.\r\n     * @param {string} name SliceMessage name.\r\n     * @param {object} data SliceMessage data.\r\n     * @param {variable} timeout SliceMessage timeout.\r\n     * @return {SliceMessageBox} current SliceMessageBox\r\n     * @public\r\n     */\r\n    sendSelf(name, data, timeout) {\r\n        if (this.messenger) {\r\n            this.messenger.sendSelf(name, data, timeout)\r\n        } else {\r\n            throw new Error(\"Can't send message: no messenger provided.\")\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Send message to the current window/frame.\r\n     * @param {string} name SliceMessage name.\r\n     * @param {object} data SliceMessage data.\r\n     * @param {variable} timeout SliceMessage timeout.\r\n     * @return {SliceMessageBox} current SliceMessageBox\r\n     * @public\r\n     */\r\n    sendCurrent(name, data, timeout) {\r\n        if (this.messenger) {\r\n            this.messenger.sendCurrent(name, data, timeout)\r\n        } else {\r\n            throw new Error(\"Can't send message: no messenger provided.\")\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Send message to the current window/frame and outer receivers.\r\n     * @param {string} name SliceMessage name.\r\n     * @param {object} data SliceMessage data.\r\n     * @param {variable} timeout SliceMessage timeout.\r\n     * @return {SliceMessageBox} current SliceMessageBox\r\n     * @public\r\n     */\r\n    sendEveryone(name, data, timeout) {\r\n        if (this.messenger) {\r\n            this.messenger.sendEveryone(name, data, timeout)\r\n        } else {\r\n            throw new Error(\"Can't send message: no messenger provided.\")\r\n        }\r\n        return this\r\n    }\r\n}\r\n\r\n/* export start */\r\nexport default SliceMessageBox\r\n/* export end */\r\n","/**\r\n  * Slice Document Messenger\r\n  * Copyright 2020 shininglab (https://github.com/shininglab-code)\r\n  * Licensed under MIT\r\n  */\r\n\r\n/* import start */\r\nimport SliceMessage from './SliceMessage.js'\r\nimport SliceMessageBox from './SliceMessageBox.js'\r\nimport SliceMessageTransport from './SliceMessageTransport.js'\r\n/* import end */\r\n\r\n/**\r\n * Send and receive messages throught browser.\r\n */\r\nclass SliceMessenger {\r\n    /**\r\n     * @constructor\r\n     * @param {string} id SliceMessenger id, should be unique per messenger\r\n     * @param {SliceMessageTransport} transport SliceMessageTransport instance\r\n     */\r\n    constructor(id, transport) {\r\n        if (!id) {\r\n            throw new Error('Can\\'t create messenger without id.')\r\n        }\r\n        if (!(transport instanceof SliceMessageTransport)) {\r\n            throw new TypeError('Messenger transport should be instance of SliceMessageTransport.')\r\n        }\r\n        this.timeouts = {\r\n            out: {},\r\n            current: {},\r\n            self: {}\r\n        }\r\n        this.id = id\r\n        this.receivers = {}\r\n        this.boxes = []\r\n        this.receive = this.receive.bind(this)\r\n        this.transport = transport\r\n        transport.addReceiver(this.id, this.receive)\r\n    }\r\n\r\n    /**\r\n     * Recieve message\r\n     * @param {SliceMessage} message SliceMessage instance.\r\n     * @return {SliceMessenger} current SliceMessenger\r\n     * @public\r\n     */\r\n    receive(message) {\r\n        if (this.boxes.length) {\r\n            this.boxes.map((box) => {\r\n                box.receive(message)\r\n            })\r\n        }\r\n        if (message.name && this.receivers.hasOwnProperty(message.name)) {\r\n            const receivers = this.receivers[message.name]\r\n            receivers.map((receiver) => {\r\n                receiver(message)\r\n            })\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Send message to outer receivers\r\n     * @param {string} name SliceMessage name.\r\n     * @param {object} data SliceMessage data.\r\n     * @param {variable} timeout SliceMessage timeout.\r\n     * @return {SliceMessenger} current SliceMessenger\r\n     * @private\r\n     */\r\n    send(name, data, timeout) {\r\n        const timeouts = this.timeouts.out\r\n        if (timeouts.hasOwnProperty(name) && timeouts[name]) {\r\n            clearTimeout(timeouts[name])\r\n            delete timeouts[name]\r\n        }\r\n        if (timeout) {\r\n            timeouts[name] = setTimeout(() => {\r\n                delete timeouts[name]\r\n                this.send(name, data)\r\n            }, timeout === true ? 0 : timeout)\r\n        } else {\r\n            const message = SliceMessage.create(name, data)\r\n            this.transport.send(this.id, message)\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Send message to the current messenger only.\r\n     * @param {string} name SliceMessage name.\r\n     * @param {object} data SliceMessage data.\r\n     * @param {variable} timeout SliceMessage timeout.\r\n     * @return {SliceMessageBox} current SliceMessageBox\r\n     * @private\r\n     */\r\n    sendSelf(name, data, timeout) {\r\n        const timeouts = this.timeouts.self\r\n        if (timeouts.hasOwnProperty(name) && timeouts[name]) {\r\n            clearTimeout(timeouts[name])\r\n            delete timeouts[name]\r\n        }\r\n        if (timeout) {\r\n            timeouts[name] = setTimeout(() => {\r\n                delete timeouts[name]\r\n                this.sendSelf(name, data)\r\n            }, timeout === true ? 0 : timeout)\r\n        } else {\r\n            const message = SliceMessage.create(name, data)\r\n            this.receive(message)\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Send message to the current window/frame.\r\n     * @param {string} name SliceMessage name.\r\n     * @param {object} data SliceMessage data.\r\n     * @param {variable} timeout SliceMessage timeout.\r\n     * @return {SliceMessageBox} current SliceMessageBox\r\n     * @private\r\n     */\r\n    sendCurrent(name, data, timeout) {\r\n        const timeouts = this.timeouts.current\r\n        if (timeouts.hasOwnProperty(name) && timeouts[name]) {\r\n            clearTimeout(timeouts[name])\r\n            delete timeouts[name]\r\n        }\r\n        if (timeout) {\r\n            timeouts[name] = setTimeout(() => {\r\n                delete timeouts[name]\r\n                this.sendCurrent(name, data)\r\n            }, timeout === true ? 0 : timeout)\r\n        } else {\r\n            const message = SliceMessage.create(name, data)\r\n            this.transport.receive(this.id, message)\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Send message to the current window/frame and outer receivers.\r\n     * @param {string} name SliceMessage name.\r\n     * @param {object} data SliceMessage data.\r\n     * @param {variable} timeout SliceMessage timeout.\r\n     * @return {SliceMessageBox} current SliceMessageBox\r\n     * @private\r\n     */\r\n    sendEveryone(name, data, timeout) {\r\n        this.sendCurrent(name, data, timeout)\r\n        this.send(name, data, timeout)\r\n        return this\r\n    }\r\n    /**\r\n     * Add receiver box\r\n     * @param {SliceMessageBox} box SliceMessageBox instance.\r\n     * @return {SliceMessenger} current SliceMessenger\r\n     * @private\r\n     */\r\n    addBox(box) {\r\n        if (box instanceof SliceMessageBox) {\r\n            this.boxes.push(box)\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Remove receiver box\r\n     * @param {SliceMessageBox} box SliceMessageBox instance.\r\n     * @return {SliceMessenger} current SliceMessenger\r\n     * @private\r\n     */\r\n    removeBox(box) {\r\n        const index = this.boxes.indexOf(box)\r\n        if (index > -1) {\r\n            this.boxes.splice(index, 1)\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Add receiver\r\n     * @param {string} name SliceMessage name.\r\n     * @param {function} receiver Receiver function.\r\n     * @return {SliceMessenger} current SliceMessenger\r\n     * @private\r\n     */\r\n    addReceiver(name, receiver) {\r\n        if (!this.receivers.hasOwnProperty(name)) {\r\n            this.receivers[name] = []\r\n        }\r\n        this.receivers[name].push(receiver)\r\n        return this\r\n    }\r\n    /**\r\n     * Remove receiver\r\n     * @param {string} name SliceMessage name.\r\n     * @param {function} receiver Receiver function.\r\n     * @return {SliceMessenger} current SliceMessenger\r\n     * @private\r\n     */\r\n    removeReceiver(name, receiver) {\r\n        if (this.receivers.hasOwnProperty(name)) {\r\n            const index = this.receivers[name].indexOf(receiver)\r\n            if (index > -1) {\r\n                this.receivers[name].splice(index, 1)\r\n            }\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Remove\r\n     * @return {void}\r\n     * @private\r\n     */\r\n    remove() {\r\n        for (let name in this.timeouts) {\r\n            if (this.timeouts.hasOwnProperty(name)) {\r\n                const timeouts = this.timeouts[name]\r\n                for (let timeout in timeouts) {\r\n                    if (timeouts.hasOwnProperty(timeout)) {\r\n                        clearTimeout(timeouts[timeout])\r\n                        delete timeouts[timeout]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.transport.removeReceiver(this.id, this.receive)\r\n    }\r\n}\r\n\r\n/* export start */\r\nexport default SliceMessenger\r\n/* export end */\r\n","/**\r\n  * Slice Document Messenger\r\n  * Copyright 2020 shininglab (https://github.com/shininglab-code)\r\n  * Licensed under MIT\r\n  */\r\n\r\n/* import start */\r\nimport SliceMessageTransport from './SliceMessageTransport.js'\r\nimport SliceMessenger from './SliceMessenger.js'\r\n/* import end */\r\n\r\n/**\r\n * Slice messenger factory.\r\n */\r\nclass SliceMessengerFactory {\r\n    /**\r\n     * Messages transports\r\n     * @static\r\n     */\r\n    static transports = []\r\n\r\n    /**\r\n     * Add transport\r\n     * @param {SliceMessageTransport} transport SliceMessageTransport instance.\r\n     * @return {void}\r\n     * @static\r\n     */\r\n    static addTransport(transport) {\r\n        if (transport instanceof SliceMessageTransport) {\r\n            if (SliceMessengerFactory.transports.indexOf(transport) < 0) {\r\n                SliceMessengerFactory.transports.push(transport)\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get messenger id from URL\r\n     * @param {string} searchURL URL to get messenger id from.\r\n     * @return {void}\r\n     * @static\r\n     */\r\n    static getIdFromURL(searchURL) {\r\n        let id = null\r\n        const prop = 'messengerId'\r\n        const queryStart = searchURL.indexOf(\"?\") + 1\r\n        const queryEnd = searchURL.indexOf(\"#\") + 1 || searchURL.length + 1\r\n        const query = searchURL.slice(queryStart, queryEnd - 1)\r\n        if (URLSearchParams) {\r\n            const params = new URLSearchParams(`?${query}`)\r\n            if (params.has(prop)) {\r\n                id = params.get(prop)\r\n            }\r\n        } else {\r\n            const parseQuery = (value) => {\r\n                let params = {}\r\n                if (value === \"\") {\r\n                    return params\r\n                }\r\n\r\n                const pairs = value.replace(/\\+/g, \" \").split(\"&\")\r\n                for (let i = 0; i < pairs.length; i++) {\r\n                    const nv = pairs[i].split(\"=\", 2)\r\n                    const n = decodeURIComponent(nv[0])\r\n                    const v = decodeURIComponent(nv[1])\r\n\r\n                    if (!params.hasOwnProperty(n)) {\r\n                        params[n] = []\r\n                    }\r\n                    params[n].push(nv.length === 2 ? v : null)\r\n                }\r\n                return params\r\n            }\r\n            const params = parseQuery(query)\r\n            if (params.hasOwnProperty(prop)) {\r\n                id = params[prop]\r\n            }\r\n        }\r\n        return id\r\n    }\r\n\r\n    /**\r\n     * Get available transport\r\n     * @param {string} id SliceMessage id.\r\n     * @param {SliceMessageTransport} transport SliceMessageTransport instance.\r\n     * @return {SliceMessenger} created SliceMessenger instance\r\n     * @public\r\n     */\r\n    static getAvailableTransport() {\r\n        let transport = null\r\n        if (SliceMessengerFactory.transports.length) {\r\n            SliceMessengerFactory.transports.some((item) => {\r\n                if (item.isAvailable()) {\r\n                    transport = item\r\n                    return true\r\n                }\r\n                return false\r\n            })\r\n        }\r\n        return transport\r\n    }\r\n\r\n    /**\r\n     * Create messenger\r\n     * @param {string} id SliceMessage id.\r\n     * @param {SliceMessageTransport} transport SliceMessageTransport instance.\r\n     * @return {SliceMessenger} created SliceMessenger instance\r\n     * @public\r\n     */\r\n    static createMessenger(id = SliceMessengerFactory.getIdFromURL(location.search), transport = SliceMessengerFactory.getAvailableTransport()) {\r\n        return new SliceMessenger(id, transport)\r\n    }\r\n}\r\n\r\n/* export start */\r\nexport default SliceMessengerFactory\r\n/* export end */\r\n"],"file":"slice-document-messenger.min.js"}