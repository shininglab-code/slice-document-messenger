{"version":3,"sources":["../../src/SliceMessage.js","../../src/SliceMessageTransport.js","../../src/SliceLocalStorageTransport.js","../../src/SliceMessageBox.js","../../src/SliceMessenger.js","../../src/SliceMessengerFactory.js"],"names":[],"mappings":"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","sourcesContent":["/**\r\n  * Slice Document Messenger\r\n  * Copyright 2020 shininglab (https://github.com/shininglab-code)\r\n  * Licensed under MIT\r\n  */\r\n\r\n/**\r\n * Message.\r\n */\r\nclass SliceMessage {\r\n    /**\r\n     * @constructor\r\n     * @param {string} name Message name\r\n     * @param {object} data Message data\r\n     */\r\n    constructor(name, data) {\r\n        this.name = name || null\r\n        this.data = data || {}\r\n    }\r\n    /**\r\n     * Create SliceMessage\r\n     * @param {string} name Message name\r\n     * @param {object} data Message data\r\n     * @return {SliceMessage} new SliceMessage\r\n     * @static\r\n     */\r\n    static create(name, data) {\r\n        return new SliceMessage(name, data)\r\n    }\r\n    /**\r\n     * Create SliceMessage from JSON string\r\n     * @param {string} str JSON string\r\n     * @return {SliceMessage} new SliceMessage\r\n     * @static\r\n     */\r\n    static fromJSON(str) {\r\n        let name = null\r\n        let data = {}\r\n        try {\r\n            const parsed = JSON.parse(str)\r\n            if (typeof parsed === 'object') {\r\n                if (parsed.hasOwnProperty('name')) {\r\n                    name = parsed.name\r\n                }\r\n                if (parsed.hasOwnProperty('data') && typeof parsed.data === 'object') {\r\n                    data = parsed.data\r\n                }\r\n            }\r\n        } catch (e) {\r\n            /* WHOOPS */\r\n            name = 'MessageParseError'\r\n            data = {\r\n                error: e,\r\n                raw: str\r\n            }\r\n        }\r\n        return new SliceMessage(name, data)\r\n    }\r\n    /**\r\n     * Transfrom to JSON string\r\n     * @return {string} JSON string\r\n     */\r\n    toString() {\r\n        return JSON.stringify({\r\n            name: this.name,\r\n            data: this.data\r\n        })\r\n    }\r\n}\r\n\r\n/* export start */\r\nexport default SliceMessage\r\n/* export end */\r\n","/**\r\n  * Slice Document Messenger\r\n  * Copyright 2020 shininglab (https://github.com/shininglab-code)\r\n  * Licensed under MIT\r\n  */\r\n\r\n/**\r\n * Message transport.\r\n */\r\nclass SliceMessageTransport {\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        this.receivers = {}\r\n    }\r\n    /**\r\n     * Get transport address\r\n     * @param {string} address Receiver address.\r\n     * @return {string} transport address\r\n     * @static\r\n     */\r\n    static getAddress(address) {\r\n        return `transport-${address}`\r\n    }\r\n    /**\r\n     * Check if transportation is available\r\n     * @return {boolean} transportation available\r\n     * @static\r\n     */\r\n    static isAvailable() {\r\n        return true\r\n    }\r\n    /**\r\n     * Check if transport is available\r\n     * @return {boolean} transport available\r\n     * @static\r\n     */\r\n    isAvailable() {\r\n        return this.constructor.isAvailable()\r\n    }\r\n    /**\r\n     * Add receiver\r\n     * @param {string} address Receiver address.\r\n     * @param {function} receiver Receiver function.\r\n     * @return {SliceMessageTransport} current SliceMessageTransport\r\n     * @public\r\n     */\r\n    addReceiver(address, receiver) {\r\n        const transportAddress = this.constructor.getAddress(address)\r\n        if (!this.receivers.hasOwnProperty(transportAddress)) {\r\n            this.receivers[transportAddress] = []\r\n        }\r\n        this.receivers[transportAddress].push(receiver)\r\n        return this\r\n    }\r\n    /**\r\n     * Remove receiver\r\n     * @param {string} address SliceMessage address.\r\n     * @param {function} receiver Receiver function.\r\n     * @return {SliceMessageTransport} current SliceMessageTransport\r\n     * @public\r\n     */\r\n    removeReceiver(address, receiver) {\r\n        const transportAddress = this.constructor.getAddress(address)\r\n        if (this.receivers.hasOwnProperty(transportAddress)) {\r\n            const index = this.receivers[transportAddress].indexOf(receiver)\r\n            if (index > -1) {\r\n                this.receivers[transportAddress].splice(index, 1)\r\n            }\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Has any reciever with such address\r\n     * @param {string} address Receivers address.\r\n     * @param {boolean} isTransport Is transport address.\r\n     * @return {boolean} true|false\r\n     * @public\r\n     */\r\n    hasAddress(address, isTransport) {\r\n        const transportAddress = isTransport ? address : this.constructor.getAddress(address)\r\n        return this.receivers.hasOwnProperty(transportAddress) && this.receivers[transportAddress].length\r\n    }\r\n    /**\r\n     * Recieve message\r\n     * @param {string} address Transport address.\r\n     * @param {SliceMessage} message SliceMessage instance.\r\n     * @param {boolean} isTransport Is transport address.\r\n     * @return {SliceMessenger} current SliceMessenger\r\n     * @public\r\n     */\r\n    receive(address, message, isTransport) {\r\n        const transportAddress = isTransport ? address : this.constructor.getAddress(address)\r\n        if (this.receivers.hasOwnProperty(transportAddress)) {\r\n            this.receivers[transportAddress].map((receiver) => {\r\n                receiver(message)\r\n            })\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Send message\r\n     * @param {string} address Messange address.\r\n     * @param {SliceMessage} message SliceMessage instance.\r\n     * @return {SliceMessageTransport} current SliceMessageTransport\r\n     * @public\r\n     */\r\n    send(address, message) {\r\n        if (window.console) {\r\n            console.log(`${this.constructor.getAddress(address)}: ${message.toString()}`)\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Remove\r\n     * @return {void}\r\n     * @public\r\n     */\r\n    remove() {\r\n        this.receivers = {}\r\n    }\r\n}\r\n\r\n/* export start */\r\nexport default SliceMessageTransport\r\n/* export end */\r\n","/**\r\n  * Slice Document Messenger\r\n  * Copyright 2020 shininglab (https://github.com/shininglab-code)\r\n  * Licensed under MIT\r\n  */\r\n\r\n/* import start */\r\nimport SliceMessage from './SliceMessage.js'\r\nimport SliceMessageTransport from './SliceMessageTransport.js'\r\n/* import end */\r\n\r\n/**\r\n * Message transport.\r\n */\r\nclass SliceLocalStorageTransport extends SliceMessageTransport {\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        super()\r\n        this.handle = this.handle.bind(this)\r\n        window.addEventListener('storage', this.handle)\r\n    }\r\n    /**\r\n     * Handle storage event\r\n     * @param {object} e Local storage event.\r\n     * @return {SliceLocalStorageTransport} current SliceLocalStorageTransport\r\n     * @private\r\n     */\r\n    handle(e) {\r\n        if (!this.hasAddress(e.key, true) || e.newValue === null) {\r\n            return null\r\n        }\r\n        const message = SliceMessage.fromJSON(e.newValue)\r\n        return this.receive(e.key, message, true)\r\n    }\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    send(address, message) {\r\n        const transportAddress = this.constructor.getAddress(address)\r\n        localStorage.setItem(transportAddress, message.toString())\r\n        localStorage.removeItem(transportAddress)\r\n        return this\r\n    }\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    remove() {\r\n        window.removeEventListener('storage', this.handle)\r\n        super.remove()\r\n    }\r\n}\r\n\r\n/* export start */\r\nexport default SliceLocalStorageTransport\r\n/* export end */\r\n","/**\r\n  * Slice Document Messenger\r\n  * Copyright 2020 shininglab (https://github.com/shininglab-code)\r\n  * Licensed under MIT\r\n  */\r\n\r\n/* import start */\r\nimport SliceMessenger from './SliceMessenger.js'\r\n/* import end */\r\n\r\n/**\r\n * Message box.\r\n * Used for quick messages handling.\r\n * Messages can be handled by itself or by its this.owner.\r\n */\r\nclass SliceMessageBox {\r\n    /**\r\n     * @constructor\r\n     * @param {object} owner Message box owner\r\n     * @param {object} settings Message box settings\r\n     * @param {SliceMessenger} messenger SliceMessenger instance\r\n     * @param {boolean} subscribe Subscribe to provided SliceMessenger\r\n     */\r\n    constructor(owner = {}, settings = {}, messenger, subscribe) {\r\n        this.settings = settings\r\n        this.owner = owner\r\n        if (messenger) {\r\n            this.setMessenger(messenger, subscribe)\r\n        }\r\n    }\r\n    /**\r\n     * Set messenger\r\n     * @param {SliceMessenger} messenger SliceMessenger instance.\r\n     * @param {boolean} subscribe Subscribe to provided SliceMessenger\r\n     * @param {boolean} unsubscribe Un-subscribe from previous SliceMessenger\r\n     * @return {SliceMessageBox} current SliceMessageBox\r\n     * @public\r\n     */\r\n    setMessenger(messenger, subscribe, unsubscribe) {\r\n        if (this.messenger && unsubscribe) {\r\n            this.messenger.removeBox(this)\r\n        }\r\n        if (messenger instanceof SliceMessenger) {\r\n            this.messenger = messenger\r\n            if (subscribe) {\r\n                this.messenger.addBox(this)\r\n            }\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Recieve message\r\n     * @param {SliceMessage} message SliceMessage instance.\r\n     * @return {SliceMessageBox} current SliceMessageBox\r\n     * @public\r\n     */\r\n    receive(message) {\r\n        if (message.name) {\r\n            const settings = this.settings\r\n            let handler = null\r\n            let handlerSettings = settings.handlers && settings.handlers.hasOwnProperty(message.name) ?\r\n                settings.handlers[message.name] : settings.defaultHandler || null\r\n            if (handlerSettings) {\r\n                if (typeof handlerSettings === 'string') {\r\n                    handlerSettings = {\r\n                        self: false,\r\n                        handler: handlerSettings\r\n                    }\r\n                }\r\n                if (handlerSettings.self) {\r\n                    if (this[handlerSettings.handler]) {\r\n                        handler = this[handlerSettings.handler]\r\n                        this[handlerSettings.handler](message)\r\n                    }\r\n                } else if (this.owner[handlerSettings.handler]) {\r\n                    handler = this.owner[handlerSettings.handler]\r\n                }\r\n            }\r\n\r\n            if (handler) {\r\n                handler(message)\r\n            } else if (handlerSettings) {\r\n                throw new Error(`Can't handle message ${message.name}.`)\r\n            }\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Send message\r\n     * @param {string} name SliceMessage name.\r\n     * @param {object} data SliceMessage data.\r\n     * @param {variable} timeout SliceMessage timeout.\r\n     * @return {SliceMessageBox} current SliceMessageBox\r\n     * @public\r\n     */\r\n    send(name, data, timeout) {\r\n        if (this.messenger) {\r\n            this.messenger.send(name, data, timeout)\r\n        } else {\r\n            throw new Error(\"Can't send message: no messenger provided.\")\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Send message to the current messenger only.\r\n     * @param {string} name SliceMessage name.\r\n     * @param {object} data SliceMessage data.\r\n     * @param {variable} timeout SliceMessage timeout.\r\n     * @return {SliceMessageBox} current SliceMessageBox\r\n     * @public\r\n     */\r\n    sendSelf(name, data, timeout) {\r\n        if (this.messenger) {\r\n            this.messenger.sendSelf(name, data, timeout)\r\n        } else {\r\n            throw new Error(\"Can't send message: no messenger provided.\")\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Send message to the current window/frame.\r\n     * @param {string} name SliceMessage name.\r\n     * @param {object} data SliceMessage data.\r\n     * @param {variable} timeout SliceMessage timeout.\r\n     * @return {SliceMessageBox} current SliceMessageBox\r\n     * @public\r\n     */\r\n    sendCurrent(name, data, timeout) {\r\n        if (this.messenger) {\r\n            this.messenger.sendCurrent(name, data, timeout)\r\n        } else {\r\n            throw new Error(\"Can't send message: no messenger provided.\")\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Send message to the current window/frame and outer receivers.\r\n     * @param {string} name SliceMessage name.\r\n     * @param {object} data SliceMessage data.\r\n     * @param {variable} timeout SliceMessage timeout.\r\n     * @return {SliceMessageBox} current SliceMessageBox\r\n     * @public\r\n     */\r\n    sendEveryone(name, data, timeout) {\r\n        if (this.messenger) {\r\n            this.messenger.sendEveryone(name, data, timeout)\r\n        } else {\r\n            throw new Error(\"Can't send message: no messenger provided.\")\r\n        }\r\n        return this\r\n    }\r\n}\r\n\r\n/* export start */\r\nexport default SliceMessageBox\r\n/* export end */\r\n","/**\r\n  * Slice Document Messenger\r\n  * Copyright 2020 shininglab (https://github.com/shininglab-code)\r\n  * Licensed under MIT\r\n  */\r\n\r\n/* import start */\r\nimport SliceMessage from './SliceMessage.js'\r\nimport SliceMessageBox from './SliceMessageBox.js'\r\nimport SliceMessageTransport from './SliceMessageTransport.js'\r\n/* import end */\r\n\r\n/**\r\n * Send and receive messages throught browser.\r\n */\r\nclass SliceMessenger {\r\n    /**\r\n     * @constructor\r\n     * @param {string} id SliceMessenger id, should be unique per messenger\r\n     * @param {SliceMessageTransport} transport SliceMessageTransport instance\r\n     */\r\n    constructor(id, transport) {\r\n        if (!id) {\r\n            throw new Error('Can\\'t create messenger without id.')\r\n        }\r\n        if (!(transport instanceof SliceMessageTransport)) {\r\n            throw new TypeError('Messenger transport should be instance of SliceMessageTransport.')\r\n        }\r\n        this.timeouts = {\r\n            out: {},\r\n            current: {},\r\n            self: {}\r\n        }\r\n        this.id = id\r\n        this.receivers = {}\r\n        this.boxes = []\r\n        this.receive = this.receive.bind(this)\r\n        this.transport = transport\r\n        transport.addReceiver(this.id, this.receive)\r\n    }\r\n\r\n    /**\r\n     * Recieve message\r\n     * @param {SliceMessage} message SliceMessage instance.\r\n     * @return {SliceMessenger} current SliceMessenger\r\n     * @public\r\n     */\r\n    receive(message) {\r\n        if (this.boxes.length) {\r\n            this.boxes.map((box) => {\r\n                box.receive(message)\r\n            })\r\n        }\r\n        if (message.name && this.receivers.hasOwnProperty(message.name)) {\r\n            const receivers = this.receivers[message.name]\r\n            receivers.map((receiver) => {\r\n                receiver(message)\r\n            })\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Send message to outer receivers\r\n     * @param {string} name SliceMessage name.\r\n     * @param {object} data SliceMessage data.\r\n     * @param {variable} timeout SliceMessage timeout.\r\n     * @return {SliceMessenger} current SliceMessenger\r\n     * @private\r\n     */\r\n    send(name, data, timeout) {\r\n        const timeouts = this.timeouts.out\r\n        if (timeouts.hasOwnProperty(name) && timeouts[name]) {\r\n            clearTimeout(timeouts[name])\r\n            delete timeouts[name]\r\n        }\r\n        if (timeout) {\r\n            timeouts[name] = setTimeout(() => {\r\n                delete timeouts[name]\r\n                this.send(name, data)\r\n            }, timeout === true ? 0 : timeout)\r\n        } else {\r\n            const message = SliceMessage.create(name, data)\r\n            this.transport.send(this.id, message)\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Send message to the current messenger only.\r\n     * @param {string} name SliceMessage name.\r\n     * @param {object} data SliceMessage data.\r\n     * @param {variable} timeout SliceMessage timeout.\r\n     * @return {SliceMessageBox} current SliceMessageBox\r\n     * @private\r\n     */\r\n    sendSelf(name, data, timeout) {\r\n        const timeouts = this.timeouts.self\r\n        if (timeouts.hasOwnProperty(name) && timeouts[name]) {\r\n            clearTimeout(timeouts[name])\r\n            delete timeouts[name]\r\n        }\r\n        if (timeout) {\r\n            timeouts[name] = setTimeout(() => {\r\n                delete timeouts[name]\r\n                this.sendSelf(name, data)\r\n            }, timeout === true ? 0 : timeout)\r\n        } else {\r\n            const message = SliceMessage.create(name, data)\r\n            this.receive(message)\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Send message to the current window/frame.\r\n     * @param {string} name SliceMessage name.\r\n     * @param {object} data SliceMessage data.\r\n     * @param {variable} timeout SliceMessage timeout.\r\n     * @return {SliceMessageBox} current SliceMessageBox\r\n     * @private\r\n     */\r\n    sendCurrent(name, data, timeout) {\r\n        const timeouts = this.timeouts.current\r\n        if (timeouts.hasOwnProperty(name) && timeouts[name]) {\r\n            clearTimeout(timeouts[name])\r\n            delete timeouts[name]\r\n        }\r\n        if (timeout) {\r\n            timeouts[name] = setTimeout(() => {\r\n                delete timeouts[name]\r\n                this.sendCurrent(name, data)\r\n            }, timeout === true ? 0 : timeout)\r\n        } else {\r\n            const message = SliceMessage.create(name, data)\r\n            this.transport.receive(this.id, message)\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Send message to the current window/frame and outer receivers.\r\n     * @param {string} name SliceMessage name.\r\n     * @param {object} data SliceMessage data.\r\n     * @param {variable} timeout SliceMessage timeout.\r\n     * @return {SliceMessageBox} current SliceMessageBox\r\n     * @private\r\n     */\r\n    sendEveryone(name, data, timeout) {\r\n        this.sendCurrent(name, data, timeout)\r\n        this.send(name, data, timeout)\r\n        return this\r\n    }\r\n    /**\r\n     * Add receiver box\r\n     * @param {SliceMessageBox} box SliceMessageBox instance.\r\n     * @return {SliceMessenger} current SliceMessenger\r\n     * @private\r\n     */\r\n    addBox(box) {\r\n        if (box instanceof SliceMessageBox) {\r\n            this.boxes.push(box)\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Remove receiver box\r\n     * @param {SliceMessageBox} box SliceMessageBox instance.\r\n     * @return {SliceMessenger} current SliceMessenger\r\n     * @private\r\n     */\r\n    removeBox(box) {\r\n        const index = this.boxes.indexOf(box)\r\n        if (index > -1) {\r\n            this.boxes.splice(index, 1)\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Add receiver\r\n     * @param {string} name SliceMessage name.\r\n     * @param {function} receiver Receiver function.\r\n     * @return {SliceMessenger} current SliceMessenger\r\n     * @private\r\n     */\r\n    addReceiver(name, receiver) {\r\n        if (!this.receivers.hasOwnProperty(name)) {\r\n            this.receivers[name] = []\r\n        }\r\n        this.receivers[name].push(receiver)\r\n        return this\r\n    }\r\n    /**\r\n     * Remove receiver\r\n     * @param {string} name SliceMessage name.\r\n     * @param {function} receiver Receiver function.\r\n     * @return {SliceMessenger} current SliceMessenger\r\n     * @private\r\n     */\r\n    removeReceiver(name, receiver) {\r\n        if (this.receivers.hasOwnProperty(name)) {\r\n            const index = this.receivers[name].indexOf(receiver)\r\n            if (index > -1) {\r\n                this.receivers[name].splice(index, 1)\r\n            }\r\n        }\r\n        return this\r\n    }\r\n    /**\r\n     * Remove\r\n     * @return {void}\r\n     * @private\r\n     */\r\n    remove() {\r\n        for (let name in this.timeouts) {\r\n            if (this.timeouts.hasOwnProperty(name)) {\r\n                const timeouts = this.timeouts[name]\r\n                for (let timeout in timeouts) {\r\n                    if (timeouts.hasOwnProperty(timeout)) {\r\n                        clearTimeout(timeouts[timeout])\r\n                        delete timeouts[timeout]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.transport.removeReceiver(this.id, this.receive)\r\n    }\r\n}\r\n\r\n/* export start */\r\nexport default SliceMessenger\r\n/* export end */\r\n","/**\r\n  * Slice Document Messenger\r\n  * Copyright 2020 shininglab (https://github.com/shininglab-code)\r\n  * Licensed under MIT\r\n  */\r\n\r\n/* import start */\r\nimport SliceMessageTransport from './SliceMessageTransport.js'\r\nimport SliceMessenger from './SliceMessenger.js'\r\n/* import end */\r\n\r\n/**\r\n * Slice messenger factory.\r\n */\r\nclass SliceMessengerFactory {\r\n    /**\r\n     * Messages transports\r\n     * @static\r\n     */\r\n    static transports = []\r\n\r\n    /**\r\n     * Add transport\r\n     * @param {SliceMessageTransport} transport SliceMessageTransport instance.\r\n     * @return {void}\r\n     * @static\r\n     */\r\n    static addTransport(transport) {\r\n        if (transport instanceof SliceMessageTransport) {\r\n            if (SliceMessengerFactory.transports.indexOf(transport) < 0) {\r\n                SliceMessengerFactory.transports.push(transport)\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get messenger id from URL\r\n     * @param {string} searchURL URL to get messenger id from.\r\n     * @return {void}\r\n     * @static\r\n     */\r\n    static getIdFromURL(searchURL) {\r\n        let id = null\r\n        const prop = 'messengerId'\r\n        const queryStart = searchURL.indexOf(\"?\") + 1\r\n        const queryEnd = searchURL.indexOf(\"#\") + 1 || searchURL.length + 1\r\n        const query = searchURL.slice(queryStart, queryEnd - 1)\r\n        if (URLSearchParams) {\r\n            const params = new URLSearchParams(`?${query}`)\r\n            if (params.has(prop)) {\r\n                id = params.get(prop)\r\n            }\r\n        } else {\r\n            const parseQuery = (value) => {\r\n                let params = {}\r\n                if (value === \"\") {\r\n                    return params\r\n                }\r\n\r\n                const pairs = value.replace(/\\+/g, \" \").split(\"&\")\r\n                for (let i = 0; i < pairs.length; i++) {\r\n                    const nv = pairs[i].split(\"=\", 2)\r\n                    const n = decodeURIComponent(nv[0])\r\n                    const v = decodeURIComponent(nv[1])\r\n\r\n                    if (!params.hasOwnProperty(n)) {\r\n                        params[n] = []\r\n                    }\r\n                    params[n].push(nv.length === 2 ? v : null)\r\n                }\r\n                return params\r\n            }\r\n            const params = parseQuery(query)\r\n            if (params.hasOwnProperty(prop)) {\r\n                id = params[prop]\r\n            }\r\n        }\r\n        return id\r\n    }\r\n\r\n    /**\r\n     * Get available transport\r\n     * @param {string} id SliceMessage id.\r\n     * @param {SliceMessageTransport} transport SliceMessageTransport instance.\r\n     * @return {SliceMessenger} created SliceMessenger instance\r\n     * @public\r\n     */\r\n    static getAvailableTransport() {\r\n        let transport = null\r\n        if (SliceMessengerFactory.transports.length) {\r\n            SliceMessengerFactory.transports.some((item) => {\r\n                if (item.isAvailable()) {\r\n                    transport = item\r\n                    return true\r\n                }\r\n                return false\r\n            })\r\n        }\r\n        return transport\r\n    }\r\n\r\n    /**\r\n     * Create messenger\r\n     * @param {string} id SliceMessage id.\r\n     * @param {SliceMessageTransport} transport SliceMessageTransport instance.\r\n     * @return {SliceMessenger} created SliceMessenger instance\r\n     * @public\r\n     */\r\n    static createMessenger(id = SliceMessengerFactory.getIdFromURL(location.search), transport = SliceMessengerFactory.getAvailableTransport()) {\r\n        return new SliceMessenger(id, transport)\r\n    }\r\n}\r\n\r\n/* export start */\r\nexport default SliceMessengerFactory\r\n/* export end */\r\n"],"file":"slice-document-messenger.js"}